package ru.yandex.practicum.filmorate.controller;

import jakarta.validation.Valid;

import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import ru.yandex.practicum.filmorate.ErrorsIO.IncorrectParameterException;
import ru.yandex.practicum.filmorate.Service.FilmService;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.storage.film.DirectorStorage;
import ru.yandex.practicum.filmorate.storage.film.FilmStorage;

import java.util.*;

@Slf4j
@RestController
@RequestMapping("/films")
public class FilmController implements ControllerInterface<Film> {

    private final FilmStorage filmStorage;
    private final FilmService filmService;
    private final DirectorStorage directorStorage;

    @Autowired
    public FilmController(FilmStorage filmStorage, FilmService filmService, DirectorStorage directorStorage) {
        this.filmStorage = filmStorage;
        this.filmService = filmService;
        this.directorStorage = directorStorage;
    }

    @GetMapping("/help")
    public Map<String, Integer> feed() {
        throw new ResponseStatusException(HttpStatus.NOT_IMPLEMENTED, "–ú–µ—Ç–æ–¥ /feed –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.");
    }

    @Override
    @GetMapping("/{id}")
    public Film getById(@PathVariable int id) {
        log.info("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä GET —Ñ–∏–ª—å–º –ø–æ Id> {}", id);
        return filmService.findFilmById(id);
    }

    @Override
    @GetMapping
    public Collection<Film> selectGetting() {
        log.info("–ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤");
        return filmService.returnAllFilms();
    }

    @Override
    @PutMapping
    public Film update(@RequestBody @Valid Film film) {
        log.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ {}", film);
        validate(film);
        return filmStorage.update(film);
    }

    @Override
    @PostMapping
    public Film create(@RequestBody @Valid Film film) {
        log.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ {}", film);
        validate(film);
        return filmStorage.create(film);
    }

    @Override
    @DeleteMapping("/{id}")
    public void delete(@PathVariable int id) {
        log.info("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–∑ –±–∞–∑—ã –ø–æ id {}", id);
        filmStorage.deleteByIdFilm(id);
    }

    @Override
    public void validate(Film film) {
        filmService.validateF(film);
    }

    @PutMapping("/{id}/like/{userId}")
    public void addLikeUserById(@PathVariable int id, @PathVariable int userId) {
        log.info("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä PUT –ª–∞–π–∫ —Ñ–∏–ª—å–º—É —Å—Ç–∞–≤–∏—Ç> User —Å Id {} - {}", id, userId);
        filmStorage.addLike(id, userId);
    }

    @DeleteMapping("/{id}/like/{userId}")
    public void deleteLikeUserById(@PathVariable int id, @PathVariable int userId) {
        log.info("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä DELETE –ª–∞–π–∫ —Ñ–∏–ª—å–º—É —É–¥–∞–ª—è–µ—Ç> {} , {}", id, userId);
        filmStorage.deleteLike(id, userId);
    }

    @GetMapping("/popular")
    public Collection<Film> getPopular(@RequestParam Optional<Integer> count) {
        int number;
        log.info("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä GET  —Å–ø–∏—Å–æ–∫ –∏–∑ –ø–µ—Ä–≤—ã—Ö  –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤> {}", count);
        if (count.isPresent()) {
            number = count.get();
        } else {
            number = 10;
        }
        return filmService.maxLikeFilm(number);
    }

    @GetMapping("/search")
    public List<Film> addSearch(@RequestParam String query, @RequestParam String by) {
        log.info("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä GET  —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å \"–ü–æ–∏—Å–∫\"> {}", query);
        return filmService.search(query, by);
    }

    @GetMapping("/director/{directorId}")     // üòâ
    public List<Film> findFilmsByDirector(@PathVariable int directorId,
                                          @RequestParam(defaultValue = "likes", required = false) String sorting) {
        log.info("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä GET  —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ —Ä–µ–∂–∏—Å—ë—Ä–∞ {} —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π", directorId);
        if (!(sorting.equals("year") || sorting.equals("likes"))) {
            throw new IncorrectParameterException("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–∫–∞ –ø–æ –≥–æ–¥–∞–º –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤, –∞ –Ω–µ –ø–æ " + sorting);
        }
        List<Film> films = directorStorage.getFilmsByDirector(directorId, sorting);
        return films;
    }
}